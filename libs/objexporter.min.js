(function(){class t{parse(t){function e(t){let e=0,r=0,o=0;const m=t.geometry,s=new THREE.Matrix3;if(!0!==m.isBufferGeometry)throw new Error("THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.");const y=m.getAttribute("position"),p=m.getAttribute("normal"),x=m.getAttribute("uv"),B=m.getIndex();if(n+="o "+t.name+"\n",t.material&&t.material.name&&(n+="usemtl "+t.material.name+"\n"),void 0!==y)for(let r=0,o=y.count;r<o;r++,e++)l.fromBufferAttribute(y,r),l.applyMatrix4(t.matrixWorld),n+="v "+l.x+" "+l.y+" "+l.z+"\n";if(void 0!==x)for(let t=0,e=x.count;t<e;t++,o++)E.fromBufferAttribute(x,t),n+="vt "+E.x+" "+E.y+"\n";if(void 0!==p){s.getNormalMatrix(t.matrixWorld);for(let t=0,e=p.count;t<e;t++,r++)a.fromBufferAttribute(p,t),a.applyMatrix3(s).normalize(),n+="vn "+a.x+" "+a.y+" "+a.z+"\n"}if(null!==B)for(let t=0,e=B.count;t<e;t+=3){for(let e=0;e<3;e++){const r=B.getX(t+e)+1;c[e]=i+r+(p||x?"/"+(x?f+r:"")+(p?"/"+(u+r):""):"")}n+="f "+c.join(" ")+"\n"}else for(let t=0,e=y.count;t<e;t+=3){for(let e=0;e<3;e++){const r=t+e+1;c[e]=i+r+(p||x?"/"+(x?f+r:"")+(p?"/"+(u+r):""):"")}n+="f "+c.join(" ")+"\n"}i+=e,f+=o,u+=r}function r(t){let e=0;const r=t.geometry,o=t.type;if(!0!==r.isBufferGeometry)throw new Error("THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.");const f=r.getAttribute("position");if(n+="o "+t.name+"\n",void 0!==f)for(let r=0,o=f.count;r<o;r++,e++)l.fromBufferAttribute(f,r),l.applyMatrix4(t.matrixWorld),n+="v "+l.x+" "+l.y+" "+l.z+"\n";if("Line"===o){n+="l ";for(let t=1,e=f.count;t<=e;t++)n+=i+t+" ";n+="\n"}if("LineSegments"===o)for(let t=1,e=t+1,r=f.count;t<r;t+=2,e=t+1)n+="l "+(i+t)+" "+(i+e)+"\n";i+=e}function o(t){let e=0;const r=t.geometry;if(!0!==r.isBufferGeometry)throw new Error("THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.");const o=r.getAttribute("position"),f=r.getAttribute("color");if(n+="o "+t.name+"\n",void 0!==o){for(let r=0,i=o.count;r<i;r++,e++)l.fromBufferAttribute(o,r),l.applyMatrix4(t.matrixWorld),n+="v "+l.x+" "+l.y+" "+l.z,void 0!==f&&(m.fromBufferAttribute(f,r).convertLinearToSRGB(),n+=" "+m.r+" "+m.g+" "+m.b),n+="\n";n+="p ";for(let t=1,e=o.count;t<=e;t++)n+=i+t+" ";n+="\n"}i+=e}let n="",i=0,f=0,u=0;const l=new THREE.Vector3,m=new THREE.Color,a=new THREE.Vector3,E=new THREE.Vector2,c=[];return t.traverse(function(t){!0===t.isMesh&&e(t),!0===t.isLine&&r(t),!0===t.isPoints&&o(t)}),n}}THREE.OBJExporter=t})();